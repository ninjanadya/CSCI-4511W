Result after running the program without changes:

python3 NN2.py 
epoch 0 Error: 0.4964100319027255
epoch 10000 Error: 0.008584525653247157
epoch 20000 Error: 0.0057894598625078085
epoch 30000 Error: 0.004629176776769985
epoch 40000 Error: 0.0039587652802736475
epoch 50000 Error: 0.003510122567861678
Output After Training: 
[[0.00260572]
 [0.99672209]
 [0.99701711]
 [0.00386759]]


Result after changing the number of layers:

python3 NN2.py 
epoch 0 Error: 0.5006282290929629
epoch 10000 Error: 0.008990245071251445
epoch 20000 Error: 0.00604862554349575
epoch 30000 Error: 0.004827940139648477
epoch 40000 Error: 0.0041227011648090435
epoch 50000 Error: 0.0036508476624163714
Output After Training: 
[[0.00225305]
 [0.99723356]
 [0.99635205]
 [0.00456238]]

There is a slight difference, the error starts off just barely higher, but reduces about the same amount. Outputs are also very similar, but slight differences exist.


Below is the changed code:

# expanded 3-layer (1 hidden layer) neural network from
# https://iamtrask.github.io/2015/07/12/basic-python-network/

import numpy as np
import matplotlib.pyplot as plt

# sigmoid function
def nonlin(x,deriv=False):
        if(deriv==True):
            return x*(1-x)
        return 1/(1+np.exp(-x))

# input data
X = np.array([[0,0,1], [0,1,1], [1,0,1], [1,1,1]])
                
# output data
y = np.array([[0], [1], [1], [0]])

# seed random numbers to make calculation deterministic (a good practice)
np.random.seed(1)

# randomly initialize the weights with mean 0
syn0 = 2*np.random.random((3,5)) - 1
syn1 = 2*np.random.random((5,1)) - 1

# run multiple epochs, where epoch = one forward pass and one backward 
# pass of all the training examples.
for j in range(60000):

    # Feed forward through layers 0, 1, and 2
    l0 = X     # input
    l1 = nonlin(np.dot(l0,syn0))
    l2 = nonlin(np.dot(l1,syn1))

    # how much did we miss the target value?
    l2_error = y - l2
    
    if (j% 10000) == 0:
        print ("epoch "+ str(j) + " Error: " + str(np.mean(np.abs(l2_error))))

    diff = l2_error.T[0]
        
    # in what direction is the target value?
    # were we really sure? if so, don't change too much.
    l2_delta = l2_error*nonlin(l2,deriv=True)

    # how much did each l1 value contribute to the l2 error (according to the weights)?
    l1_error = l2_delta.dot(syn1.T)
    
    # in what direction is the target l1?
    # were we really sure? if so, don't change too much.
    l1_delta = l1_error * nonlin(l1,deriv=True)

    syn1 += l1.T.dot(l2_delta)
    syn0 += l0.T.dot(l1_delta)

print("Output After Training: ")
print(l2)
